// Copyright (c) 2017-2021, Mudita Sp. z.o.o. All rights reserved.
// For licensing, see https://github.com/mudita/MuditaOS/LICENSE.md

#pragma once

#include "Operation.hpp"
#include "Audio/Stream.hpp"
#include "Audio/Endpoint.hpp"
#include "Audio/decoder/DecoderWorker.hpp"
#include "Audio/StreamQueuedEventsListener.hpp"
#include "Audio/decoder/Decoder.hpp"

namespace audio::playbackDefaults
{
    constexpr audio::Volume defaultLoudspeakerVolume = 10;
    constexpr audio::Volume defaultHeadphonesVolume  = 2;
} // namespace audio::playbackDefaults

namespace audio
{
    class PlaybackOperation : public Operation
    {
      public:
        PlaybackOperation(const char *file,
                          const audio::PlaybackType &playbackType,
                          AudioServiceMessage::Callback callback = nullptr);

        virtual ~PlaybackOperation();

        audio::RetCode Start(audio::Token token) final;
        audio::RetCode Stop() final;
        audio::RetCode Pause() final;
        audio::RetCode Resume() final;
        audio::RetCode SendEvent(std::shared_ptr<Event> evt) final;
        audio::RetCode SwitchProfile(const Profile::Type type) final;
        audio::RetCode SetOutputVolume(float vol) final;
        audio::RetCode SetInputGain(float gain) final;

        Position GetPosition() final;

      private:
<<<<<<< HEAD
        static constexpr auto minimumBlockSize = 256U;
        static constexpr auto maximumBlockSize = 2048U;
        static constexpr Endpoint::Capabilities playbackCapabilities{.minBlockSize = minimumBlockSize,
                                                                     .maxBlockSize = maximumBlockSize};

||||||| 0de40b859
=======
        static constexpr auto minimumBlockSize = 256U;
        static constexpr auto maximumBlockSize = 2048U;
        static constexpr Endpoint::Capabilities playbackCapabilities{.minBlockSize = minimumBlockSize,
                                                                     .maxBlockSize = maximumBlockSize};

        std::unique_ptr<Stream> dataStreamOut;
>>>>>>> 574119c533fe75fbe989c87b4bda380dbdce9ad2
        std::unique_ptr<Decoder> dec;
        std::unique_ptr<Tags> tags;
<<<<<<< HEAD
        std::unique_ptr<StreamConnection> outputConnection;
        std::unique_ptr<Stream> dataStreamOut;
||||||| 0de40b859
        std::unique_ptr<StreamConnection> outputConnection = nullptr;
=======
        std::unique_ptr<StreamConnection> outputConnection;
>>>>>>> 574119c533fe75fbe989c87b4bda380dbdce9ad2

        DecoderWorker::EndOfFileCallback endOfFileCallback;
    };

} // namespace audio
